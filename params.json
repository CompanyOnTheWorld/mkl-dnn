{
  "name": "Mkl-dnn",
  "tagline": "Intel(R) Math Kernel Library for Deep Neural Networks (Intel(R) MKL-DNN)",
  "body": "# Intel(R) Math Kernel Library for Deep Neural Networks (Intel(R) MKL-DNN)\r\n[![Apache License Version 2.0](https://img.shields.io/badge/license-Apache_2.0-green.svg)](LICENSE)\r\n![Technical Preview](https://img.shields.io/badge/version-technical_preview-orange.svg)\r\n\r\nIntel(R) Math Kernel Library for Deep Neural Networks (Intel(R) MKL-DNN) is an\r\nopen source performance library for Deep Learning (DL) applications intended\r\nfor acceleration of DL frameworks on Intel(R) architecture. Intel(R) MKL-DNN\r\nincludes highly vectorized and threaded building blocks for implementation of\r\nconvolutional neural networks (CNN) with C and C++ interfaces. We created this\r\nproject to help DL community innovate on Intel(R) processors.\r\n\r\nIntel MKL-DNN functionality shares implementation with [Intel(R) Math Kernel\r\nLibrary (Intel(R) MKL)](https://software.intel.com/en-us/intel-mkl), but is not\r\nAPI compatible with Intel MKL 2017. We will be looking into ways to converge\r\nAPI in future releases of Intel MKL.\r\n\r\nThis release is a technical preview with functionality limited to AlexNet and\r\nVGG topologies forward path. While this library is in\r\ntechnical preview phase, its API may change without considerations of backward\r\ncompatibility.\r\n\r\n## License\r\nIntel MKL-DNN is licensed under\r\n[Apache License Version 2.0](http://www.apache.org/licenses/LICENSE-2.0).\r\n\r\n## Documentation\r\nYou can find the latest Intel MKL-DNN documentation at [GitHub pages](http://01org.github.io/mkl-dnn/).\r\n\r\n## Support\r\nPlease report issues and suggestions via\r\n[GitHub issues](https://github.com/01org/mkl-dnn/issues) or start a topic on\r\n[Intel MKL forum](https://software.intel.com/en-us/forums/intel-math-kernel-library).\r\n\r\n## How to Contribute\r\nWe welcome community contributions to Intel MKL-DNN. If you have an idea how to improve the product:\r\n\r\n* Let us know about your proposal via\r\n [GitHub issues](https://github.com/01org/mkl-dnn/issues).\r\n\r\n* Make sure you can build the product and run all the examples with your patch\r\n\r\n* In the case of a larger feature, create a test\r\n\r\n* Submit a [pull request](https://github.com/01org/mkl-dnn/pulls)\r\n\r\nWe will review your contribution and, if any additional fixes or modifications\r\nare necessary, may give some feedback to guide you. When accepted, your pull\r\nrequest will be merged into our internal and GitHub repositories.\r\n\r\n## System Requirements\r\nIntel MKL-DNN supports Intel(R) 64 architecture processors and is optimized for\r\n* Intel(R) Xeon(R) processor E5-xxxx v3 (codename Haswell)\r\n* Intel(R) Xeon(R) processor E5-xxxx v4 (codename Broadwell)\r\n\r\nProcessors without Intel(R) Advanced Vector Extensions 2 (Intel(R) AVX2) are not\r\nsupported in this release.\r\n\r\nSoftware dependencies:\r\n* [Cmake](https://cmake.org/download/) 2.8.0 or later\r\n* [Doxygen](http://www.stack.nl/~dimitri/doxygen/download.html#srcbin) 1.8.5 or later\r\n* C++ compiler with C++11 standard support\r\n\r\nThe software was validated on RedHat\\* Enterprise Linux 7 with\r\n* GNU\\* Compiler Collection 4.8\r\n* GNU\\* Compiler Collection 6.1\r\n* Clang\\* 3.8.0\r\n* [Intel(R) C/C++ Compiler](https://software.intel.com/en-us/intel-parallel-studio-xe)\r\n  16.0 or later\r\n\r\nThe implementation relies on OpenMP\\* SIMD extensions, and we recommend using\r\nIntel(R) compiler for the best performance results.\r\n\r\n## Installation\r\nDownload [Intel MKL-DNN source code](https://github.com/01org/mkl-dnn/archive/master.zip)\r\nor clone the repository to your system\r\n\r\n```\r\n\tgit clone https://github.com/01org/mkl-dnn.git\r\n```\r\n\r\nBefore the installation, make sure that all the dependencies are available and\r\nhave correct versions. Intel MKL-DNN uses optimized matrix-matrix\r\nmultiplication (GEMM) routine from Intel MKL. Dynamic library with this\r\nfunctionality is included with the Intel MKL-DNN release. Before building the\r\nproject download the library using provided script\r\n\r\n```\r\n\tcd scripts && ./prepare_mkl.sh && cd ..\r\n```\r\n\r\nor download manually and unpack to `external` directory in the repository root.\r\n\r\nIntel MKL-DNN uses CMake-based build system\r\n\r\n```\r\n\tmkdir -p build && cd build && cmake .. && make\r\n```\r\n\r\nIntel MKL-DNN includes unit tests implemented using the googletest\r\nframework. To validate the build, run:\r\n\r\n```\r\n\tmake test\r\n```\r\n\r\nDocumentation is provided inline and can be generated in HTML format with\r\nDoxygen:\r\n\r\n```\r\n\tmake doc\r\n```\r\n\r\nDocumentation will be created in `build/reference/html` folder.\r\n\r\nFinally,\r\n```\r\n\tmake install\r\n```\r\nwill put header files, libraries and documentation to `/usr/local`. To change\r\ninstallation path use the option `-DCMAKE_INSTALL_PREFIX=<prefix>` when invoking\r\nCMake.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}